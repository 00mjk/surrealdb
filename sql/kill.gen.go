// Code generated by https://github.com/abcum/tmpl
// Source file: kill.gen.go.tmpl
// DO NOT EDIT!

// Copyright Â© 2016 Abcum Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sql

import (
	"time"
)

func (s *SelectStatement) Begin() {
	if s.Timeout == 0 {
		return
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	s.killable.ticker = time.AfterFunc(s.Timeout, func() {
		s.killable.ticker.Stop()
		s.killable.ticker = nil
		close(s.killable.closer)
	})
}

func (s *SelectStatement) Cease() {
	if s.Timeout == 0 {
		return
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	if s.killable.ticker != nil {
		s.killable.ticker.Stop()
	}
}

func (s *SelectStatement) Timedout() <-chan struct{} {
	if s.Timeout == 0 {
		return nil
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	return s.killable.closer
}

func (s *CreateStatement) Begin() {
	if s.Timeout == 0 {
		return
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	s.killable.ticker = time.AfterFunc(s.Timeout, func() {
		s.killable.ticker.Stop()
		s.killable.ticker = nil
		close(s.killable.closer)
	})
}

func (s *CreateStatement) Cease() {
	if s.Timeout == 0 {
		return
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	if s.killable.ticker != nil {
		s.killable.ticker.Stop()
	}
}

func (s *CreateStatement) Timedout() <-chan struct{} {
	if s.Timeout == 0 {
		return nil
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	return s.killable.closer
}

func (s *UpdateStatement) Begin() {
	if s.Timeout == 0 {
		return
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	s.killable.ticker = time.AfterFunc(s.Timeout, func() {
		s.killable.ticker.Stop()
		s.killable.ticker = nil
		close(s.killable.closer)
	})
}

func (s *UpdateStatement) Cease() {
	if s.Timeout == 0 {
		return
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	if s.killable.ticker != nil {
		s.killable.ticker.Stop()
	}
}

func (s *UpdateStatement) Timedout() <-chan struct{} {
	if s.Timeout == 0 {
		return nil
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	return s.killable.closer
}

func (s *DeleteStatement) Begin() {
	if s.Timeout == 0 {
		return
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	s.killable.ticker = time.AfterFunc(s.Timeout, func() {
		s.killable.ticker.Stop()
		s.killable.ticker = nil
		close(s.killable.closer)
	})
}

func (s *DeleteStatement) Cease() {
	if s.Timeout == 0 {
		return
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	if s.killable.ticker != nil {
		s.killable.ticker.Stop()
	}
}

func (s *DeleteStatement) Timedout() <-chan struct{} {
	if s.Timeout == 0 {
		return nil
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	return s.killable.closer
}

func (s *RelateStatement) Begin() {
	if s.Timeout == 0 {
		return
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	s.killable.ticker = time.AfterFunc(s.Timeout, func() {
		s.killable.ticker.Stop()
		s.killable.ticker = nil
		close(s.killable.closer)
	})
}

func (s *RelateStatement) Cease() {
	if s.Timeout == 0 {
		return
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	if s.killable.ticker != nil {
		s.killable.ticker.Stop()
	}
}

func (s *RelateStatement) Timedout() <-chan struct{} {
	if s.Timeout == 0 {
		return nil
	}
	if s.killable.closer == nil {
		s.killable.closer = make(chan struct{})
	}
	return s.killable.closer
}
